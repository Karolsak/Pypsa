attribute,type,unit,default,description,status
name,string,n/a,n/a,Unique name,Input (required)
now,any,n/a,"""now""","The current snapshot/time/scenario, relevant e.g. when ``network.pf()`` is called without a snapshot argument.",Input (optional)
pypsa _version,string,n/a,n/a,Fetched from __version__ variable in package __init__.py.  String formed from dot-separated integers is required syntax.,Output
srid,integer,n/a,4326,"Spatial Reference System Identifier for x,y coordinates of buses. 4326 default is standard longitude and latitude.",Input (optional)
snapshots,list or pandas .Index,n/a,"[""now""]","List of snapshots or time steps. All time-dependent series quantities are indexed by ``network.snapshots``. To reset the snapshots, call ``network.set_snapshots(new)``.",Input (optional)
snapshot _weightings,pandas .DataFrame, hours ,1,"The weightings applied to each snapshot, so that snapshots can represent more than one hour or fractions of one hour. The objective weightings are used to weight snapshots in the LOPF objective function. The store weightings determine the state of charge change for stores and storage units. The generator weightings are used when calculating global constraints.",Input (optional)
investment _periods,pandas .Index,years,[],"Time periods of investment. Only used for multi investment optimisation. Years have to be integer and increasing (e.g. [2025,2030,2035]). Default is an empty pd.Index([]).",Input (optional)
investment _period _weightings,pandas .DataFrame,n/a,1,Weightings applied to each investment period. Objective weightings are multiplied with all cost coefficients in the objective function of the respective investment period (e.g. used to include social discount rate). Years weighting denote the elapsed time until the subsequent investment period (e.g. used for global constraints CO2 emissions).,Input (optional)
all _components,"set
(of Components)",n/a,n/a,"A set retrieved from the string values in col=0 of the ``components.csv`` file.  Note that ""Network"" itself is **not** considered a Component and will be excluded from this set, if present as a row in ``components.csv``.",Output
{type} _components,"set
(of Components)",n/a,n/a,"Certain Component classes are assigned a ``type`` attribute (a column in the ``components.csv`` file).  Upon instantiating a Network class object, PyPSA forms an attribute, ``{type}_components`` for each unique value of ""type"" strings.  This attribute references a Python set of all Components of the given type.  The type values present in the default csv are: ``passive_branch``, ``standard_type``, ``controllable_branch``, ``controllable_one_port``, and ``passive_one_port``.",Output
one_port _components,"set
(of Components)",n/a,n/a,Union of ``passive_one_port_components`` and ``controllable_one_port_components`` (as per previous construction),Output
branch _components,"set
(of Components)",n/a,n/a,Union of ``passive_branch_components`` and ``controllable_branch_components`` (as per previous construction),Output
{list_name},pandas .DataFrame,n/a,n/a,"All data for static attributes, i.e. not indicated as ""series"" type in relevant csv in the ``component_attrs`` sub-directory.  These data are compiled by PyPSA from inputs for all devices indicated by ``list_name``.  The DataFrame index is the (unique) device ""names""; columns are all static attributes.  (See Section **""Static Data""** below for example usage.)",Output
{list_name}_t,dict of pandas .DataFrames,n/a,n/a,"For each Component class, all time-varying attributes, i.e. indicated with ``type`` ""series"" OR ""static or series"" in ``component_attrs`` csv, are stored in a dictionary of DataFrames.  A dictionary key is assigned for each time-varying attribute.  These keys retrieve a DataFrame where the index is ``network.snapshots`` and columns are the (unique) device ""names"" in the Component class.  (See Section **""Time-varying Data""** below for example usage.)",Output
components,dict,n/a,n/a,"A complex dictionary holding the schema data for each Component class.  Keys are the Component label.  (See main Section below **Components Schema""** for detailed specification.)",Output
controllable _branches,pandas .DataFrame,n/a,n/a,PENDING.  These are set by a controllable_branches setter method I haven't worked through yet to understand context of usage.,
passive _branches,pandas .DataFrame,n/a,n/a,PENDING.  These are set by a passive_branches setter method I haven't worked through yet to understand context of usage.,
